// Code generated by goctl. DO NOT EDIT!
// Source: core.proto

package server

import (
	"context"

	"github.com/suyuan32/simple-admin-core/rpc/internal/logic"
	"github.com/suyuan32/simple-admin-core/rpc/internal/svc"
	"github.com/suyuan32/simple-admin-core/rpc/types/core"
)

type CoreServer struct {
	svcCtx *svc.ServiceContext
	core.UnimplementedCoreServer
}

func NewCoreServer(svcCtx *svc.ServiceContext) *CoreServer {
	return &CoreServer{
		svcCtx: svcCtx,
	}
}

// init
func (s *CoreServer) InitDatabase(ctx context.Context, in *core.Empty) (*core.BaseResp, error) {
	l := logic.NewInitDatabaseLogic(ctx, s.svcCtx)
	return l.InitDatabase(in)
}

// user service
func (s *CoreServer) Login(ctx context.Context, in *core.LoginReq) (*core.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *CoreServer) ChangePassword(ctx context.Context, in *core.ChangePasswordReq) (*core.BaseResp, error) {
	l := logic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

func (s *CoreServer) CreateOrUpdateUser(ctx context.Context, in *core.CreateOrUpdateUserReq) (*core.BaseResp, error) {
	l := logic.NewCreateOrUpdateUserLogic(ctx, s.svcCtx)
	return l.CreateOrUpdateUser(in)
}

func (s *CoreServer) GetUserById(ctx context.Context, in *core.UUIDReq) (*core.UserInfoResp, error) {
	l := logic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *CoreServer) GetUserList(ctx context.Context, in *core.GetUserListReq) (*core.UserListResp, error) {
	l := logic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

func (s *CoreServer) DeleteUser(ctx context.Context, in *core.IDReq) (*core.BaseResp, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *CoreServer) UpdateProfile(ctx context.Context, in *core.UpdateProfileReq) (*core.BaseResp, error) {
	l := logic.NewUpdateProfileLogic(ctx, s.svcCtx)
	return l.UpdateProfile(in)
}

// menu service
func (s *CoreServer) CreateOrUpdateMenu(ctx context.Context, in *core.CreateOrUpdateMenuReq) (*core.BaseResp, error) {
	l := logic.NewCreateOrUpdateMenuLogic(ctx, s.svcCtx)
	return l.CreateOrUpdateMenu(in)
}

func (s *CoreServer) DeleteMenu(ctx context.Context, in *core.IDReq) (*core.BaseResp, error) {
	l := logic.NewDeleteMenuLogic(ctx, s.svcCtx)
	return l.DeleteMenu(in)
}

func (s *CoreServer) GetMenuListByRole(ctx context.Context, in *core.IDReq) (*core.MenuInfoList, error) {
	l := logic.NewGetMenuListByRoleLogic(ctx, s.svcCtx)
	return l.GetMenuListByRole(in)
}

func (s *CoreServer) GetMenuByPage(ctx context.Context, in *core.PageInfoReq) (*core.MenuInfoList, error) {
	l := logic.NewGetMenuByPageLogic(ctx, s.svcCtx)
	return l.GetMenuByPage(in)
}

func (s *CoreServer) CreateOrUpdateMenuParam(ctx context.Context, in *core.CreateOrUpdateMenuParamReq) (*core.BaseResp, error) {
	l := logic.NewCreateOrUpdateMenuParamLogic(ctx, s.svcCtx)
	return l.CreateOrUpdateMenuParam(in)
}

func (s *CoreServer) DeleteMenuParam(ctx context.Context, in *core.IDReq) (*core.BaseResp, error) {
	l := logic.NewDeleteMenuParamLogic(ctx, s.svcCtx)
	return l.DeleteMenuParam(in)
}

func (s *CoreServer) GeMenuParamListByMenuId(ctx context.Context, in *core.IDReq) (*core.MenuParamListResp, error) {
	l := logic.NewGeMenuParamListByMenuIdLogic(ctx, s.svcCtx)
	return l.GeMenuParamListByMenuId(in)
}

// role service
func (s *CoreServer) CreateOrUpdateRole(ctx context.Context, in *core.RoleInfo) (*core.BaseResp, error) {
	l := logic.NewCreateOrUpdateRoleLogic(ctx, s.svcCtx)
	return l.CreateOrUpdateRole(in)
}

func (s *CoreServer) DeleteRole(ctx context.Context, in *core.IDReq) (*core.BaseResp, error) {
	l := logic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

func (s *CoreServer) GetRoleById(ctx context.Context, in *core.IDReq) (*core.RoleInfo, error) {
	l := logic.NewGetRoleByIdLogic(ctx, s.svcCtx)
	return l.GetRoleById(in)
}

func (s *CoreServer) GetRoleList(ctx context.Context, in *core.PageInfoReq) (*core.RoleListResp, error) {
	l := logic.NewGetRoleListLogic(ctx, s.svcCtx)
	return l.GetRoleList(in)
}

func (s *CoreServer) SetRoleStatus(ctx context.Context, in *core.SetStatusReq) (*core.BaseResp, error) {
	l := logic.NewSetRoleStatusLogic(ctx, s.svcCtx)
	return l.SetRoleStatus(in)
}

// api management service
func (s *CoreServer) CreateOrUpdateApi(ctx context.Context, in *core.ApiInfo) (*core.BaseResp, error) {
	l := logic.NewCreateOrUpdateApiLogic(ctx, s.svcCtx)
	return l.CreateOrUpdateApi(in)
}

func (s *CoreServer) DeleteApi(ctx context.Context, in *core.IDReq) (*core.BaseResp, error) {
	l := logic.NewDeleteApiLogic(ctx, s.svcCtx)
	return l.DeleteApi(in)
}

func (s *CoreServer) GetApiList(ctx context.Context, in *core.ApiPageReq) (*core.ApiListResp, error) {
	l := logic.NewGetApiListLogic(ctx, s.svcCtx)
	return l.GetApiList(in)
}

// authorization management service
func (s *CoreServer) GetMenuAuthority(ctx context.Context, in *core.IDReq) (*core.RoleMenuAuthorityResp, error) {
	l := logic.NewGetMenuAuthorityLogic(ctx, s.svcCtx)
	return l.GetMenuAuthority(in)
}

func (s *CoreServer) CreateOrUpdateMenuAuthority(ctx context.Context, in *core.RoleMenuAuthorityReq) (*core.BaseResp, error) {
	l := logic.NewCreateOrUpdateMenuAuthorityLogic(ctx, s.svcCtx)
	return l.CreateOrUpdateMenuAuthority(in)
}

// example
func (s *CoreServer) Hello(ctx context.Context, in *core.HelloReq) (*core.BaseResp, error) {
	l := logic.NewHelloLogic(ctx, s.svcCtx)
	return l.Hello(in)
}
