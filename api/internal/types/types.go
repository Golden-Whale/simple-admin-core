// Code generated by goctl. DO NOT EDIT.
package types

// Create or update role information params | 创建或更新角色信息参数
// swagger:model RoleInfo
type RoleInfo struct {
	// Role ID | 角色 ID
	// Required : true
	// Maximum: 1000
	Id uint64 `json:"id" validate:"number,max=1000"`
	// Role Name | 角色名
	// Required : true
	// Max length: 20
	Name string `json:"name" validate:"max=20"`
	// Role value | 角色值
	// Required : true
	// Max length: 10
	Value string `json:"value" validate:"max=10"`
	// Role's default page | 角色默认管理页面
	// Required : true
	// Max length: 20
	DefaultRouter string `json:"defaultRouter" validate:"max=50"`
	// Role status | 角色状态
	// Required : true
	// Maximum: 20
	Status uint32 `json:"status" validate:"number,max=20"`
	// Role remark | 角色备注
	// Required : true
	// Max length: 200
	Remark string `json:"remark" validate:"omitempty,max=200"`
	// Role's sorting number | 角色排序
	// Required : true
	// Maximum: 1000
	OrderNo uint32 `json:"orderNo" validate:"number,max=1000"`
	// Create time | 创建日期
	// Required: true
	CreateAt int64 `json:"createAt" validate:"number"`
}

// The response data of role list | 角色列表数据
// swagger:response RoleListResp
type RoleListResp struct {
	// The total number of data | 数据总数
	Total uint64 `json:"total"`
	// The role list data | 角色列表数据
	// in: body
	Data []RoleInfo `json:"data"`
}

// The request params of setting role status | 设置角色状态参数
// swagger:model SetStatusReq
type SetStatusReq struct {
	// ID
	// Required: true
	// Maximum: 1000
	Id uint64 `json:"id" validate:"number,max=1000"`
	// Status code | 状态码
	// Required: true
	// Maximum: 20
	Status uint32 `json:"status" validate:"number,max=20"`
}

// The basic response with data | 基础带数据信息
// swagger:response BaseMsg
type BaseMsg struct {
	Code int32  `json:"code"`
	Msg  string `json:"msg"`
	Data string `json:"data"`
}

// The basic response without data | 基础不带数据信息
// swagger:response BaseMsg
type BaseResp struct {
	Code int32  `json:"code"`
	Msg  string `json:"msg"`
}

// The simplest message | 最简单的信息
// swagger:response SimpleMsg
type SimpleMsg struct {
	// Message | 信息
	Msg string `json:"msg"`
}

// swagger:model PageInfo
// The page request parameters | 列表请求参数
type PageInfo struct {
	// Page number | 第几页
	// Required: true
	Page uint64 `json:"page" validate:"number"`
	// Page size | 单页数据行数
	// Required: true
	// Maximum: 100000
	PageSize uint64 `json:"pageSize" validate:"number,max=100000"`
}

// The page response data model | 列表返回信息
// swagger:response PageList
type PageList struct {
	// Total number | 数据总数
	Total uint64 `json:"total"`
	// Data | 数据
	Data []string `json:"data"`
}

// Basic id request | 基础id参数请求
// swagger:model IDReq
type IDReq struct {
	// ID
	// Required: true
	ID uint `json:"id" validate:"number"`
}

// Basic id request | 基础id参数请求
// swagger:model IDPathReq
type IDPathReq struct {
	// ID
	// Required: true
	ID uint `path:"id"`
}

// Basic UUID request | 基础UUID参数请求
// swagger:model UUIDReq
type UUIDReq struct {
	// UUID
	// Required: true
	// Max length: 36
	UUID string `json:"UUID" path:"UUID" validate:"len=36"`
}

// The base response data | 基础信息
// swagger:response BaseInfo
type BaseInfo struct {
	// ID
	ID uint `json:"id"`
	// Create date | 创建日期
	CreatedAt int64 `json:"createdAt"`
	// Update date | 更新日期
	UpdatedAt int64 `json:"updatedAt"`
	// Delete date | 删除日期
	DeletedAt int64 `json:"deletedAt"`
}

// login request | 登录参数
// swagger:model LoginReq
type LoginReq struct {
	// User Name | 用户名
	// Required: true
	// Max length: 20
	Username string `json:"username" validate:"alphanum,max=20"`
	// Password | 密码
	// Required: true
	// Min length: 6
	// Max length: 30
	Password string `json:"password" validate:"max=30,min=6"`
	// Captcha Id which store in redis | 验证码编号, 存在redis中
	// Required: true
	// Max length: 20
	CaptchaId string `json:"captchaId"  validate:"len=20"`
	// The Captcha which users input | 用户输入的验证码
	// Required: true
	// Max length: 5
	Captcha string `json:"captcha" validate:"len=5"`
}

// The login response data | 登录返回数据
// swagger:response LoginResp
type LoginResp struct {
	// User's UUID | 用户的UUID
	UserId string `json:"userId"`
	// User's role information| 用户的角色信息
	// in: body
	Role RoleInfoSimple `json:"role"`
	// Token for authorization | 验证身份的token
	Token string `json:"token"`
	// Expire timestamp | 过期时间戳
	Expire uint64 `json:"expire"`
}

// The profile response data | 个人信息返回数据
// swagger:response ProfileResp
type ProfileResp struct {
	// user's nickname | 用户的昵称
	Nickname string `json:"nickname"`
	// The user's avatar path | 用户的头像路径
	Avatar string `json:"avatar"`
	// User's mobile phone number | 用户的手机号码
	Mobile string `json:"mobile"`
	// The user's email address | 用户的邮箱
	Email string `json:"email"`
}

// The profile request data | 个人信息请求参数
// swagger:model ProfileReq
type ProfileReq struct {
	// user's nickname | 用户的昵称
	// Required: true
	// Max length: 10
	Nickname string `json:"nickname" validate:"alphanumunicode,max=10"`
	// The user's avatar path | 用户的头像路径
	// Required: true
	// Max length: 30
	Avatar string `json:"avatar"`
	// User's mobile phone number | 用户的手机号码
	// Required: true
	// Max length: 18
	Mobile string `json:"mobile" validate:"numeric,max=18"`
	// The user's email address | 用户的邮箱
	// Required: true
	// Max length: 100
	Email string `json:"email" validate:"email,max=100"`
}

// The simple role data | 简单的角色数据
// swagger:response RoleInfoSimple
type RoleInfoSimple struct {
	// Role name | 角色名
	RoleName string `json:"roleName"`
	// Role value | 角色值
	Value string `json:"value"`
}

// register request | 注册参数
// swagger:model RegisterReq
type RegisterReq struct {
	// User Name | 用户名
	// Required: true
	// Max length: 20
	Username string `json:"username" validate:"alphanum,max=20"`
	// Password | 密码
	// Required: true
	// Min length: 6
	// Max length: 30
	Password string `json:"password" validate:"max=30,min=6"`
	// Captcha Id which store in redis | 验证码编号, 存在redis中
	// Required: true
	// Max length: 20
	CaptchaId string `json:"captchaId" validate:"len=20"`
	// The Captcha which users input | 用户输入的验证码
	// Required: true
	// Max length: 5
	Captcha string `json:"captcha" validate:"len=5"`
	// The user's email address | 用户的邮箱
	// Required: true
	// Max length: 100
	Email string `json:"email" validate:"email,max=100"`
}

// change user's password request | 修改密码请求参数
// swagger:model ChangePasswordReq
type ChangePasswordReq struct {
	// User's old password | 用户旧密码
	// Required: true
	// Max length: 30
	OldPassword string `json:"oldPassword" validate:"max=30"`
	// User's new password | 用户新密码
	// Required: true
	// Max length: 30
	NewPassword string `json:"newPassword" validate:"max=30"`
}

// The response data of user's information | 用户信息返回数据
// swagger:response UserInfoResp
type UserInfoResp struct {
	// User's id | 用户Id
	Id int64 `json:"id"`
	// User Name | 用户名
	Username string `json:"username"`
	// User's nickname | 用户的昵称
	Nickname string `json:"nickname"`
	// User's mobile phone number | 用户的手机号码
	Mobile string `json:"mobile"`
	// User's role id | 用户的角色Id
	RoleId uint32 `json:"roleId"`
	// The user's email address | 用户的邮箱
	Email string `json:"email"`
	// The user's avatar path | 用户的头像路径
	Avatar string `json:"avatar"`
	// The user's layout mode | 用户的布局
	SideMode string `json:"sideMode"`
	// The user's status | 用户状态
	// 1 normal, 2 ban | 1 正常 2 拉黑
	Status   int32 `json:"status"`
	CreateAt int64 `json:"createAt"`
	UpdateAt int64 `json:"updateAt"`
}

// The response data of user's basic information | 用户基本信息返回数据
// swagger:response GetUserInfoResp
type GetUserInfoResp struct {
	// User's UUID | 用户的UUID
	UUID string `json:"UUID"`
	// User name | 用户名
	Username string `json:"username"`
	// user's nickname | 用户的昵称
	Nickname string `json:"nickname"`
	// The user's avatar path | 用户的头像路径
	Avatar string `json:"avatar"`
	// User's role information| 用户的角色信息
	// in: body
	Roles GetUserRoleInfo `json:"roles"`
}

// The response data of user's basic role information | 用户角色信息数据
// swagger:response GetUserRoleInfo
type GetUserRoleInfo struct {
	// Role name | 角色名
	RoleName string `json:"roleName"`
	// Role value for permission control | 角色值用于前端页面组件显示权限
	Value string `json:"value"`
}

// The response data of user list | 用户列表数据
// swagger:response UserListResp
type UserListResp struct {
	// The total number of data | 数据总数
	Total uint64 `json:"total"`
	// The user list data | 用户列表数据
	// in: body
	Data []UserInfoResp `json:"data"`
}

// The permission code for front end permission control | 权限码： 用于前端权限控制
// swagger:response PermCodeResp
type PermCodeResp struct {
	// Permission code data | 权限码数据
	Data []string `json:"data"`
}

// Create or update user information request | 创建或更新用户信息
// swagger:model CreateOrUpdateUserReq
type CreateOrUpdateUserReq struct {
	// User's id | 用户Id
	// Required: true
	Id int64 `json:"id" validate:"number"`
	// User Name | 用户名
	// Required: true
	// Max length: 20
	Username string `json:"username" validate:"alphanum,max=20"`
	// User's nickname | 用户的昵称
	// Required: true
	// Max length: 10
	Nickname string `json:"nickname" validate:"alphanumunicode,max=10"`
	// Password | 密码
	// Required: true
	// Max length: 30
	// Min length: 6
	Password string `json:"password" validate:"omitempty,max=30,min=6"`
	// User's mobile phone number | 用户的手机号码
	// Required: true
	// Max length: 18
	Mobile string `json:"mobile" validate:"numeric,max=18"`
	// User's role id | 用户的角色Id
	// Required: true
	// Maximum: 1000
	RoleId uint32 `json:"roleId" validate:"number,max=1000"`
	// The user's email address | 用户的邮箱
	// Required: true
	// Max length: 100
	Email string `json:"email" validate:"email,max=100"`
	// The user's avatar path | 用户的头像路径
	// Required: true
	// Example: https://localhost/static/1.png
	Avatar string `json:"avatar"`
	// The user's status | 用户状态
	// 1 normal, 2 ban | 1 正常 2 拉黑
	// Required: true
	// Maximum: 20
	Status int32 `json:"status" validate:"number,max=20"`
}

// Get user list request | 获取用户列表请求参数
// swagger:model GetUserListReq
type GetUserListReq struct {
	// Page number | 第几页
	// Required: true
	Page uint64 `json:"page" validate:"number"`
	// Page size | 单页数据行数
	// Required: true
	// Maximum: 100000
	PageSize uint64 `json:"pageSize" validate:"number,max=100000"`
	// User Name | 用户名
	// Required: true
	// Max length: 20
	Username string `json:"username" validate:"omitempty,alphanum,max=20"`
	// User's nickname | 用户的昵称
	// Required: true
	// Max length: 10
	Nickname string `json:"nickname" validate:"omitempty,alphanumunicode,max=10"`
	// User's mobile phone number | 用户的手机号码
	// Required: true
	// Max length: 18
	Mobile string `json:"mobile" validate:"omitempty,numeric,max=18"`
	// The user's email address | 用户的邮箱
	// Required: true
	// Max length: 100
	Email string `json:"email" validate:"omitempty,email,max=100"`
	// User's role ID | 用户的角色Id
	// Required: true
	// Maximum: 1000
	RoleId uint64 `json:"roleId" validate:"omitempty,number,max=1000"`
}

// The response data of menu information | 菜单返回数据
// swagger:response Menu
type Menu struct {
	BaseInfo
	// Menu type: directory or menu | 菜单类型: 目录或菜单
	// 0. directory group 1. menu | 0 目录 1 菜单
	MenuType uint32 `json:"type"`
	// Parent menu ID | 父级菜单ID
	ParentId uint `json:"parentId"`
	// The menu level | 菜单等级
	MenuLevel uint32 `json:"level"`
	// The path to visit menu | 菜单访问路径
	Path string `json:"path"`
	// Menu name | 菜单名
	Name string `json:"name"`
	// Redirect path | 跳转路径
	Redirect string `json:"redirect"`
	// The component path | 组件路径
	Component string `json:"component"`
	// The sorting number | 排序编号
	OrderNo uint32 `json:"orderNo"`
	// If disabled | 是否禁用菜单
	Disabled bool `json:"disabled"`
	Meta
	// children | 子集
	// in: body
	Children []*Menu `json:"children"`
}

// The meta data of menu | 菜单的meta数据
// swagger:response Meta
type Meta struct {
	// Menu title show in page | 菜单显示名
	// Max length: 50
	Title string `json:"title" validate:"max=50"`
	// Menu Icon | 菜单图标
	// Max length: 50
	Icon string `json:"icon" validate:"max=50"`
	// Hide menu | 隐藏菜单
	HideMenu bool `json:"hideMenu" validate:"boolean"`
	// If hide the breadcrumb | 隐藏面包屑
	HideBreadcrumb bool `json:"hideBreadcrumb" validate:"boolean"`
	// Current active menu, if not nil, it will active the tab | 当前激活的菜单
	// Max length: 30
	CurrentActiveMenu string `json:"currentActiveMenu,omitempty" validate:"max=30"`
	// Do not keep alive the tab | 不缓存Tab
	IgnoreKeepAlive bool `json:"ignoreKeepAlive" validate:"boolean"`
	// Hide the tab header | 当前路由不在标签页显示
	HideTab bool `json:"hideTab" validate:"boolean"`
	// Iframe path | 内嵌iframe的地址
	FrameSrc string `json:"frameSrc,omitempty" validate:"max=100"`
	// The route carries parameters or not | 如果该路由会携带参数，且需要在tab页上面显示。则需要设置为true
	CarryParam bool `json:"carryParam" validate:"boolean"`
	// Hide children menu or not | 隐藏所有子菜单
	HideChildrenInMenu bool `json:"hideChildrenInMenu" validate:"boolean"`
	// Affix tab | 是否固定标签
	Affix bool `json:"affix" validate:"boolean"`
	// The maximum number of pages the router can open | 动态路由可打开Tab页数
	DynamicLevel uint32 `json:"dynamicLevel" validate:"number,lt=30"`
	// The real path of the route without dynamic part | 动态路由的实际Path, 即去除路由的动态部分
	RealPath string `json:"realPath,omitempty" validate:"max=200"`
}

// The response data of menu list | 菜单列表数据
// swagger:response MenuListResp
type MenuListResp struct {
	// The total number of data | 数据总数
	Total uint64 `json:"total"`
	// The menu list data | 菜单列表数据
	// in: body
	Data []*Menu `json:"data"`
}

// The response data of role menu list, show after user login | 角色菜单列表数据， 登录后自动获取
// swagger:response MenuListResp
type GetMenuListBase struct {
	// Menu type: directory or menu | 菜单类型: 目录或菜单
	MenuType uint32 `json:"type"`
	// Parent menu ID | 父级菜单ID
	ParentId uint `json:"parentId"`
	// The menu level | 菜单等级
	MenuLevel uint32 `json:"level"`
	// The path to visit menu | 菜单访问路径
	Path string `json:"path"`
	// Menu name | 菜单名
	Name string `json:"name"`
	// Redirect path | 跳转路径
	Redirect string `json:"redirect"`
	// The component path | 组件路径
	Component string `json:"component"`
	// The sorting number | 排序编号
	OrderNo uint32 `json:"orderNo"`
	// If disabled | 是否禁用菜单
	Disabled bool `json:"disabled"`
	// in: body
	Meta Meta `json:"meta"`
	// children | 子集
	// in: body
	Children []*GetMenuListBase `json:"children"`
}

// Create or update menu information request params | 创建或更新菜单信息参数
// swagger:model CreateOrUpdateMenuReq
type CreateOrUpdateMenuReq struct {
	// ID
	// Required: true
	ID uint32 `json:"id" validate:"number"`
	// Menu type: directory or menu | 菜单类型: 目录或菜单
	// Required: true
	// Maximum: 10
	MenuType uint32 `json:"type" validate:"number,max=10"`
	// Parent menu ID | 父级菜单ID
	// Required: true
	ParentId uint `json:"parentId" validate:"number"`
	// The path to visit menu | 菜单访问路径
	// Required: true
	// Max length: 30
	Path string `json:"path" validate:"max=200"`
	// Menu name | 菜单名
	// Required: true
	// Max length: 20
	Name string `json:"name" validate:"max=20"`
	// Redirect path | 跳转路径
	// Required: true
	// Max length: 100
	// Example: https://www.google.com
	Redirect string `json:"redirect" validate:"max=100"`
	// The component path | 组件路径
	// Required: true
	// Max length: 100
	// Example: /sys/menu/index
	Component string `json:"component" validate:"max=100"`
	// The sorting number | 排序编号
	// Required: true
	// Maximum: 1000
	OrderNo uint32 `json:"orderNo" validate:"number,max=1000"`
	// If disabled | 是否禁用菜单
	// Required: true
	Disabled bool `json:"disabled" validate:"boolean"`
	Meta
}

// Create or update menu extra parameters request params | 创建或更新菜单额外参数的请求参数
// swagger:model CreateOrUpdateMenuParamReq
type CreateOrUpdateMenuParamReq struct {
	// ID
	// Required: true
	ID uint32 `json:"id" validate:"number"`
	// Menu ID | 菜单ID
	// Required: true
	MenuId uint32 `json:"menuId" validate:"number"`
	// Data Type | 数据类型
	// Required: true
	// Min length: 1
	// Max length: 8
	DataType string `json:"dataType" validate:"min=1,max=8"`
	// Key | 键
	// Required: true
	// Min length: 1
	// Max length: 20
	Key string `json:"key" validate:"min=1,max=20"`
	// Value | 值
	// Required: true
	// Min length: 1
	// Max length: 100
	Value string `json:"value" validate:"min=1,max=100"`
}

// The response data of menu parameters  | 菜单参数列表数据
// swagger:response MenuParamResp
type MenuParamResp struct {
	BaseInfo
	// Menu ID | 菜单ID
	MenuId uint32 `json:"menuId"`
	// Data Type | 数据类型
	DataType string `json:"dataType"`
	// Key | 键
	Key string `json:"key"`
	// Value | 值
	Value string `json:"value"`
}

// The response data of menu parameters list which belong to some menu | 某个菜单的菜单参数列表数据
// swagger:response MenuParamListByMenuIdResp
type MenuParamListByMenuIdResp struct {
	// The total number of data | 数据总数
	Total uint64 `json:"total"`
	// The menu list data | 菜单列表数据
	// in: body
	Data []MenuParamResp `json:"data"`
}

// The response data of captcha | 验证码返回数据
// swagger:response CaptchaInfo
type CaptchaInfo struct {
	CaptchaId string `json:"captchaId"`
	ImgPath   string `json:"imgPath"`
}

// The response data of API information | API信息
// swagger:response ApiInfo
type ApiInfo struct {
	// ID
	Id       uint64 `json:"id"`
	CreateAt int64  `json:"createAt"`
	// API path | API路径
	Path string `json:"path"`
	// API Description | API 描述
	Description string `json:"description"`
	// API group | API分组
	Group string `json:"group"`
	// API request method e.g. POST | API请求类型 如POST
	Method string `json:"method"`
}

// Create or update API information request | 创建或更新API信息
// swagger:model CreateOrUpdateApiReq
type CreateOrUpdateApiReq struct {
	// ID
	// Required: true
	Id uint64 `json:"id" validate:"number"`
	// Create date | 创建日期
	// Required: true
	CreateAt int64 `json:"createAt" validate:"number"`
	// API path | API路径
	// Required: true
	// Min length: 1
	// Max length: 30
	Path string `json:"path" validate:"min=1,max=30"`
	// API Description | API 描述
	// Required: true
	// Max length: 30
	Description string `json:"description" validate:"max=30"`
	// API group | API分组
	// Require: true
	// Min length: 1
	// Max length: 10
	Group string `json:"group" validate:"alphanum,min=1,max=10"`
	// API request method e.g. POST | API请求类型 如POST
	// Required: true
	// Min length: 3
	// Max length: 4
	Method string `json:"method" validate:"uppercase,min=3,max=4"`
}

// The response data of API list | API列表数据
// swagger:response ApiListResp
type ApiListResp struct {
	// The total number of data | 数据总数
	Total uint64 `json:"total"`
	// The api list data | 角色列表数据
	// in: body
	Data []ApiInfo `json:"data"`
}

// Get API list request params | API列表请求参数
// swagger:model ApiListReq
type ApiListReq struct {
	PageInfo
	// API path | API路径
	// Required: true
	// Max length: 100
	Path string `json:"path" validate:"omitempty,max=100"`
	// API Description | API 描述
	// Required: true
	// Max length: 50
	Description string `json:"description" validate:"omitempty,max=50"`
	// API group | API分组
	// Require: true
	// Max length: 10
	Group string `json:"group" validate:"omitempty,alphanum,max=10"`
	// API request method e.g. POST | API请求类型 如POST
	// Required: true
	// Min length: 3
	// Max length: 30
	Method string `json:"method" validate:"omitempty,uppercase,max=4"`
}

// The response data of api authorization | API授权数据
// swagger:response ApiAuthorityInfo
type ApiAuthorityInfo struct {
	// API path | API 路径
	Path string `json:"path"`
	// API method | API请求方法
	Method string `json:"method"`
}

// Create or update api authorization information request | 创建或更新API授权信息
// swagger:model CreateOrUpdateApiAuthorityReq
type CreateOrUpdateApiAuthorityReq struct {
	// Role ID | 角色ID
	// Required: true
	// Maximum: 1000
	RoleId uint64 `json:"roleId" validate:"number,max=1000"`
	// API authorization list | API授权列表数据
	// Required: true
	Data []ApiAuthorityInfo `json:"data"`
}

// The response data of api authorization list | API授权列表数据
// swagger:response ApiAuthorityListResp
type ApiAuthorityListResp struct {
	// The total number of data | 数据总数
	Total uint64 `json:"total"`
	// The api authorization list data | API授权列表数据
	// in: body
	Data []ApiAuthorityInfo `json:"data"`
}

// Create or update menu authorization information request params | 创建或更新菜单授权信息参数
// swagger:model MenuAuthorityInfoReq
type MenuAuthorityInfoReq struct {
	// role ID | 角色ID
	// Required: true
	// Maximum: 1000
	RoleId uint64 `json:"roleId" validate:"number,max=1000"`
	// menu ID array | 菜单ID数组
	// Required: true
	MenuIds []uint64 `json:"menuIds"`
}

// Create or update menu authorization information request params | 创建或更新菜单授权信息参数
// swagger:response MenuAuthorityInfo
type MenuAuthorityInfoResp struct {
	// role ID | 角色ID
	RoleId uint64 `json:"roleId"`
	// menu ID array | 菜单ID数组
	MenuIds []uint64 `json:"menuIds"`
}

// Hello response | Hello返回信息
// swagger:response HelloResp
type HelloResp struct {
	// Msg
	Msg string `json:"msg"`
}

// Hello request | Hello请求
// swagger:model HelloReq
type HelloReq struct {
	// Name | 名称
	// Required: true
	Name string `json:"name" validate:"max=10"`
}
